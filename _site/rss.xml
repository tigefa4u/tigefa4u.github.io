<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>tigefa4u.github</title>
 <link href="http://tigefa4u.github.io/atom.xml" rel="self"/>
 <link href="http://tigefa4u.github.io/"/>
 <updated>2013-09-19T02:46:19+07:00</updated>
 <id>http://tigefa4u.github.io</id>
 <author>
   <name>tigefa4u.github</name>
 </author>
 
 
 <entry>
   <title>tigefa4u on github</title>
   <link href="http://tigefa4u.github.io/2013/09/tigefa4u-on-github.html"/>
   <updated>2013-09-19T00:00:00+07:00</updated>
   <id>http://tigefa4u.github.io/2013/09/tigefa4u-on-github</id>
   <content type="html">
&lt;script src=&quot;https://gist.github.com/6613648.js&quot;&gt; &lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>test posting</title>
   <link href="http://tigefa4u.github.io/2013/09/test-posting.html"/>
   <updated>2013-09-19T00:00:00+07:00</updated>
   <id>http://tigefa4u.github.io/2013/09/test-posting</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>FiyoCMS</title>
   <link href="http://tigefa4u.github.io/2013/09/fiyocms.html"/>
   <updated>2013-09-18T16:05:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/09/fiyocms</id>
   <content type="html">&lt;h1 id=&quot;fiyocms&quot;&gt;FiyoCMS&lt;/h1&gt;

&lt;p&gt;Fiyo CMS id Very easy to make template CMS &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://demo.fiyo.org&quot;&gt;Checkout Demo&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;Download &lt;a href=&quot;http://www.fiyo.org/download&quot;&gt;Recent Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Easy to Design&lt;/li&gt;
  &lt;li&gt;SEO Optimizer&lt;/li&gt;
  &lt;li&gt;Friendly Coding&lt;/li&gt;
  &lt;li&gt;Easy Customize&lt;/li&gt;
  &lt;li&gt;Compatible with PHP 5.3.x&lt;/li&gt;
  &lt;li&gt;Ajax+JQuery+PHP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;link&quot;&gt;Link&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fiyo.org&quot;&gt;FiyoCMS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twitter.com/FiyoCMS&quot;&gt;Follow @FiyoCMS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tigefa4u.github.io&quot;&gt;@tigefa4u&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;LICENSE.txt&quot;&gt;the GPL-V3 license&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>MyBB Feature Beta Stable</title>
   <link href="http://tigefa4u.github.io/2013/08/mybb-feature-beta.html"/>
   <updated>2013-08-31T00:52:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/08/mybb-feature-beta</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.mybb.com&quot; title=&quot;MyBB&quot;&gt;&lt;img src=&quot;/img/posts/mybb-logo.png&quot; alt=&quot;MyBB&quot; title=&quot;MyBB&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;free-never-tasted-so-good&quot;&gt;Free never tasted so good.&lt;/h2&gt;
&lt;p&gt;MyBB is a free and open source, community-based, forum software project.&lt;/p&gt;

&lt;p&gt;(https://github.com/mybb/mybb/zipball/feature)&lt;/p&gt;

&lt;h3 id=&quot;unreleased-versions&quot;&gt;Unreleased Versions&lt;/h3&gt;
&lt;p&gt;Stable and Feature branches may contain partially-commited features which are broken, incomplete or may never make it to public release. For these reasons, it is not recommended that you use either of these branches as a live forum. They should be used for development purposes or previews only.
MyBB does not support unreleased versions.&lt;/p&gt;

&lt;h3 id=&quot;contribute&quot;&gt;Contribute&lt;/h3&gt;
&lt;p&gt;Contributing to MyBB is easy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fork the project&lt;/li&gt;
  &lt;li&gt;If you want to fix a bug, switch to the stable branch&lt;/li&gt;
  &lt;li&gt;If you want to work on MyBB 1.8, switch to the feature branch&lt;/li&gt;
  &lt;li&gt;Make your changes (ensuring you follow the MyBB Development Standards) and push them to your forked repository&lt;/li&gt;
  &lt;li&gt;Send us a pull request with your changes and make sure you reference the issue ticket number your changes relate to (update the ticket too to tell us you’ve fixed it)&lt;/li&gt;
  &lt;li&gt;SQA will provide feedback and, if it passes verification, your pull request will be merged into MyBB&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;community&quot;&gt;Community&lt;/h3&gt;
&lt;p&gt;Visit our community at &lt;a href=&quot;http://www.mybb.com&quot;&gt;MyBB.com&lt;/a&gt; for support.&lt;/p&gt;

&lt;h3 id=&quot;license&quot;&gt;License&lt;/h3&gt;
&lt;p&gt;MyBB is licensed under &lt;a href=&quot;http://www.mybb.com/about/license&quot;&gt;GNU Lesser General Public License v3&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SemPress Wordpress Themes</title>
   <link href="http://tigefa4u.github.io/2013/08/sempress-wordpress-themes.html"/>
   <updated>2013-08-30T19:50:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/08/sempress-wordpress-themes</id>
   <content type="html">
&lt;p&gt;&lt;img alt=&quot;monstra-cms&quot; src=&quot;/img/posts/screenshot.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sempress&quot;&gt;SemPress&lt;/h1&gt;

&lt;p&gt;A WordPress theme, highly semantic, HTML5 templates, responsive and seo optimized. SemPress supports most of the new HTML5 tags, the new HTML5 input-types, microformats, microformats v2 and microdata (Schema.org).&lt;/p&gt;

&lt;h2 id=&quot;posh---plain-old-semantic-html&quot;&gt;POSH - Plain old Semantic HTML&lt;/h2&gt;

&lt;p&gt;From the &lt;a href=&quot;http://microformats.org/wiki/posh&quot;&gt;micrormats wiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The term semantic-html is a mouthful, and belies both how simple it is, how well established
it is among modern web designers, and the fact that it has benefits far beyond the obvious doing
the right thing for the Web by using semantic markup. We need a simple short mnemonic term that
captures the essence of the concept, and is easily verbed (to posh, poshify, poshed up).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SemPress is fully HTML5 compatible and uses a lot of the new tags, semantics and input-types.&lt;/p&gt;

&lt;h2 id=&quot;web-semantics&quot;&gt;Web Semantics&lt;/h2&gt;

&lt;p&gt;SemPress’ code is marked-up with microformats and microdata:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;used &lt;a href=&quot;http://microformats.org/&quot;&gt;microformats&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://microformats.org/wiki/hatom&quot;&gt;hAtom&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://microformats.org/wiki/hcard&quot;&gt;hCard&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://microformats.org/wiki/rel-tag&quot;&gt;rel-tag&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://microformats.org/wiki/xfn&quot;&gt;XFN&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;used &lt;a href=&quot;http://microformats.org/wiki/microformats-2&quot;&gt;microformats version 2&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;h-atom/h-entry&lt;/li&gt;
      &lt;li&gt;h-card&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://microformats.org/wiki/activity-streams&quot;&gt;ActivityStreams&lt;/a&gt; (h-as-bookmark, h-as-note, …)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://microformats.org/wiki/comment-brainstorming#microformats2_h-feed_p-comments&quot;&gt;Comment Draft&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;used &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/microdata.html&quot;&gt;microdata&lt;/a&gt;: 
    &lt;ul&gt;
      &lt;li&gt;http://schema.org/Blog&lt;/li&gt;
      &lt;li&gt;http://schema.org/BlogPosting&lt;/li&gt;
      &lt;li&gt;http://schema.org/UserComments&lt;/li&gt;
      &lt;li&gt;http://schema.org/WebPage&lt;/li&gt;
      &lt;li&gt;http://schema.org/Person&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Planned formats:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;micormats (v2): hAudio and hMedia&lt;/li&gt;
  &lt;li&gt;microdata: http://schema.org/MediaObject&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wordpress-features&quot;&gt;WordPress Features&lt;/h2&gt;

&lt;p&gt;SemPress supports:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Post_Formats&quot;&gt;Custom Post Formats&lt;/a&gt;: aside, status, gallery, video, audio, chat, quote, link and image&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Post_Thumbnails&quot;&gt;Post-Thumbnails&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Function_Reference/add_editor_style&quot;&gt;Editor-Style&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Navigation_Menus&quot;&gt;Navigation Menus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Automatic_Feed_Links&quot;&gt;Automatic Feed Links&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Custom_Headers&quot;&gt;Custom-Header&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codex.wordpress.org/Custom_Backgrounds&quot;&gt;Custom-Backgrounds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jetpack.me/support/infinite-scroll/&quot;&gt;Infinite Scroll&lt;/a&gt; (JetPack)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;translations&quot;&gt;Translations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;de_DE: thanks to &lt;a href=&quot;http://www.benjaminhartwich.de/&quot;&gt;Benjamin Hartwich&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/benhartwich&quot;&gt;@benhartwich&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;sv_SE: thanks to &lt;a href=&quot;http://deluxive.se/blog/&quot;&gt;Christopher Anderton&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/deluxivese&quot;&gt;@deluxivese&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;ru_RU: thanks to &lt;a href=&quot;http://0leg.net&quot;&gt;Oleg&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/oleg_sh&quot;&gt;@oleg_sh&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;fr_FR: thanks to &lt;a href=&quot;http://www.jp-software.fr/en/&quot;&gt;Julien Pierre&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://coderwall.com/pfefferle&quot;&gt;&lt;img src=&quot;http://api.coderwall.com/pfefferle/endorsecount.png&quot; alt=&quot;endorse&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>EsoTalk 1.0.0g2</title>
   <link href="http://tigefa4u.github.io/2013/08/esotalk.html"/>
   <updated>2013-08-30T19:50:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/08/esotalk</id>
   <content type="html">
&lt;p&gt;esoTalk is free, open-source Internet forum software written in PHP and MySQL. 
It is intent on being extremely simple, fast, and modern, containing all of the essential features a forum might need, and a powerful plugin system allowing developers to extend it in any way they like.&lt;/p&gt;

&lt;p&gt;If you like this software, please consider &lt;a href=&quot;http://esotalk.org/donate&quot;&gt;donating to support the developer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installing-esotalk&quot;&gt;Installing esoTalk&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Upload the contents of this folder to the location on your web server where you would like esoTalk to be accessible at.&lt;/li&gt;
  &lt;li&gt;Visit this location in your web browser. You will be taken to the esoTalk installer.&lt;/li&gt;
  &lt;li&gt;Follow the instructions in the installer. If you need help, visit the &lt;a href=&quot;http://esotalk.org/forum&quot;&gt;esoTalk Support Forum&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Monstra-CMS 2.2.1</title>
   <link href="http://tigefa4u.github.io/2013/08/download-monstra-cms.html"/>
   <updated>2013-08-30T19:46:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/08/download-monstra-cms</id>
   <content type="html">
&lt;p&gt;&lt;img alt=&quot;monstra-cms&quot; src=&quot;/img/posts/monstra-logo.png&quot; /&gt;
# Monstra CMS
Fast and small content management system written in PHP!&lt;/p&gt;

&lt;h2 id=&quot;system-requirements&quot;&gt;System Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;UNIX/Linux host&lt;/li&gt;
  &lt;li&gt;PHP 5.2.3 or higher&lt;/li&gt;
  &lt;li&gt;SimpleXML Module&lt;/li&gt;
  &lt;li&gt;Apache Mod Rewrite&lt;/li&gt;
  &lt;li&gt;Multibyte String&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps-to-install&quot;&gt;Steps to Install&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://monstra.org/download&quot;&gt;Download the latest version.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Unzip the contents to a new folder on your local computer.&lt;/li&gt;
  &lt;li&gt;Upload that whole folder with an FTP client to your host.&lt;/li&gt;
  &lt;li&gt;You may also need to recursively CHMOD the folder /storage/, /tmp/, /backups/ and /public/ to 755(or 777) if your host doesn’t set it implicitly.&lt;/li&gt;
  &lt;li&gt;Also you may also need to recursively CHMOD the /install.php, /.htaccess and /sitemap.xml to 755(or 777) if your host doesn’t set it implicitly.&lt;/li&gt;
  &lt;li&gt;Type http://example.org/install.php in the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Help on the &lt;a href=&quot;http://forum.monstra.org&quot;&gt;Forum.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Donate to keep Monstra free. We will add you to Monstra &lt;a href=&quot;http://monstra.org/contribute/sponsors&quot;&gt;Sponsors Page.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Develop a new plugin.&lt;/li&gt;
  &lt;li&gt;Create a new theme.&lt;/li&gt;
  &lt;li&gt;Find and &lt;a href=&quot;https://github.com/MonstraLab/monstra-cms/issues&quot;&gt;report issues.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Link back to &lt;a href=&quot;http://monstra.org&quot;&gt;Monstra&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://monstra.org&quot;&gt;Site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://forum.monstra.org&quot;&gt;Forum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://monstra.org/documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MonstraLab/monstra-cms&quot;&gt;Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copyright (C) 2012-2013 Romanenko Sergey / Awilum&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Glyphicons for Bootstrap</title>
   <link href="http://tigefa4u.github.io/2013/08/glyphicons-for-bootstrap.html"/>
   <updated>2013-08-30T19:40:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/08/glyphicons-for-bootstrap</id>
   <content type="html">
&lt;h1 id=&quot;glyphicons-for-bootstrap&quot;&gt;Glyphicons for Bootstrap&lt;/h1&gt;

&lt;p&gt;The official Bootstrap icon font, featuring 160 glyphs from &lt;a href=&quot;http://glyphicons.com&quot;&gt;Glyphicons&lt;/a&gt;, ready for use in any Bootstrap project. Includes support for IE8+.&lt;/p&gt;

&lt;p&gt;To get started, check out &lt;a href=&quot;http://glyphicons.getbootstrap.com&quot;&gt;http://glyphicons.getbootstrap.com&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;bugs-and-feature-requests&quot;&gt;Bugs and feature requests&lt;/h3&gt;

&lt;p&gt;Have a bug or a feature request? &lt;a href=&quot;https://github.com/twitter/bootstrap/issues&quot;&gt;Please open a new issue&lt;/a&gt;. Before opening any issue, please search for existing issues and read the &lt;a href=&quot;https://github.com/necolas/issue-guidelines&quot;&gt;Issue Guidelines&lt;/a&gt;, written by &lt;a href=&quot;https://github.com/necolas/&quot;&gt;Nicolas Gallagher&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;contributing&quot;&gt;Contributing&lt;/h3&gt;

&lt;p&gt;Please read through our guidelines for contributing to Bootstrap. Included are directions for opening issues, coding standards, and notes on development. All HTML and CSS should conform to the &lt;a href=&quot;http://github.com/mdo/code-guide&quot;&gt;Code Guide&lt;/a&gt;, maintained by &lt;a href=&quot;http://github.com/mdo&quot;&gt;Mark Otto&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;community&quot;&gt;Community&lt;/h3&gt;

&lt;p&gt;Keep track of development and community news.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow &lt;a href=&quot;http://twitter.com/twbootstrap&quot;&gt;@twbootstrap on Twitter&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Read and subscribe to the &lt;a href=&quot;http://blog.getbootstrap.com&quot;&gt;The Official Twitter Bootstrap Blog&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Have a question that’s not a feature request or bug report? &lt;a href=&quot;http://groups.google.com/group/twitter-bootstrap&quot;&gt;Ask on the mailing list.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Chat with fellow Bootstrappers in IRC. On the &lt;code&gt;irc.freenode.net&lt;/code&gt; server, in the &lt;code&gt;##twitter-bootstrap&lt;/code&gt; channel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;versioning&quot;&gt;Versioning&lt;/h3&gt;

&lt;p&gt;For transparency and insight into our release cycle, and for striving to maintain backward compatibility, bootstrap-glyphicons will be maintained under the Semantic Versioning guidelines as much as possible.&lt;/p&gt;

&lt;p&gt;Releases will be numbered with the following format:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And constructed with the following guidelines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Breaking backward compatibility bumps the major (and resets the minor and patch)&lt;/li&gt;
  &lt;li&gt;New additions without breaking backward compatibility bumps the minor (and resets the patch)&lt;/li&gt;
  &lt;li&gt;Bug fixes and misc changes bumps the patch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on SemVer, please visit &lt;a href=&quot;http://semver.org/&quot;&gt;http://semver.org/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;authors&quot;&gt;Authors&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mark Otto&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://twitter.com/mdo&quot;&gt;http://twitter.com/mdo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/mdo&quot;&gt;http://github.com/mdo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;copyright-and-license&quot;&gt;Copyright and license&lt;/h3&gt;

&lt;p&gt;Copyright 2013 Mark Otto, Inc under &lt;a href=&quot;LICENSE&quot;&gt;the MIT license&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>YOURLS 1.6</title>
   <link href="http://tigefa4u.github.io/2013/08/yourls.html"/>
   <updated>2013-08-30T19:32:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/08/yourls</id>
   <content type="html">
&lt;h1 id=&quot;yourls&quot;&gt;YOURLS&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://yourls.org/images/yourls-logo.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This Github repo is automatically synced to the official YOURLS &lt;a href=&quot;http://yourls.googlecode.com/svn/trunk/&quot;&gt;SVN repo&lt;/a&gt; (trunk) when a new commit is pushed.&lt;/p&gt;

&lt;p&gt;For now, the development will &lt;em&gt;not&lt;/em&gt; happen here. For more information, see &lt;a href=&quot;http://blog.yourls.org/2012/08/should-yourls-be-on-github-instead/&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;official-stuff&quot;&gt;“Official” stuff&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yourls.org&quot;&gt;Project home &amp;amp; doc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/yourls/w/list&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/yourls/issues/list&quot;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;license&quot;&gt;License&lt;/h4&gt;
&lt;p&gt;Free software. Do whatever the hell you want with it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Download Latest Jekyll</title>
   <link href="http://tigefa4u.github.io/2013/08/download-latest-jekyll.html"/>
   <updated>2013-08-30T19:17:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/08/download-latest-jekyll</id>
   <content type="html">
&lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), 
runs it through Textile or Markdown and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server. 
This is also the engine behind 
&lt;span class=&quot;label label-important&quot;&gt;“GitHub Pages”:http://pages.github.com,&lt;/span&gt; which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;

&lt;h2&gt; Getting Started &lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;“Install”:http://jekyllrb.com/docs/installation/ the gem&lt;/li&gt;
  &lt;li&gt;Read up about its “Usage”:http://jekyllrb.com/docs/usage/ and “Configuration”:http://jekyllrb.com/docs/configuration/&lt;/li&gt;
  &lt;li&gt;Take a gander at some existing “Sites”:http://wiki.github.com/mojombo/jekyll/sites&lt;/li&gt;
  &lt;li&gt;Fork and “Contribute”:https://github.com/mojombo/jekyll/blob/master/CONTRIBUTING.md your own modifications&lt;/li&gt;
  &lt;li&gt;Have questions? Post them on the “Mailing List”:http://groups.google.com/group/jekyll-rb&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; Diving In &lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;“Migrate”:http://jekyllrb.com/docs/migrations/ from your previous system&lt;/li&gt;
  &lt;li&gt;Learn how the “YAML Front Matter”:http://jekyllrb.com/docs/frontmatter/ works&lt;/li&gt;
  &lt;li&gt;Put information on your site with “Variables”:http://jekyllrb.com/docs/variables/&lt;/li&gt;
  &lt;li&gt;Customize the “Permalinks”:http://jekyllrb.com/docs/permalinks/ your posts are generated with&lt;/li&gt;
  &lt;li&gt;Use the built-in “Liquid Extensions”:http://jekyllrb.com/docs/templates/ to make your life easier&lt;/li&gt;
  &lt;li&gt;Use custom “Plugins”:http://jekyllrb.com/docs/plugins/ to generate content specific to your site&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; Runtime Dependencies &lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Classifier: Generating related posts (Ruby)&lt;/li&gt;
  &lt;li&gt;Directory Watcher: Auto-regeneration of sites (Ruby)&lt;/li&gt;
  &lt;li&gt;Kramdown: Markdown-superset converter (Ruby)&lt;/li&gt;
  &lt;li&gt;Liquid: Templating system (Ruby)&lt;/li&gt;
  &lt;li&gt;Maruku: Default markdown engine (Ruby)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; Developer Dependencies &lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RDiscount: Discount Markdown Processor (Ruby)&lt;/li&gt;
  &lt;li&gt;RedCloth: Textile support (Ruby)&lt;/li&gt;
  &lt;li&gt;RedGreen: Nicer test output (Ruby)&lt;/li&gt;
  &lt;li&gt;RR: Mocking (Ruby)&lt;/li&gt;
  &lt;li&gt;Shoulda: Test framework (Ruby)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; License &lt;/h2&gt;

&lt;p&gt;See “LICENSE”:https://github.com/mojombo/jekyll/blob/master/LICENSE.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>tigefa4u.github / Forking and Pull Request!</title>
   <link href="http://tigefa4u.github.io/2013/08/tigefa4u-github.html"/>
   <updated>2013-08-30T15:54:47+07:00</updated>
   <id>http://tigefa4u.github.io/2013/08/tigefa4u-github</id>
   <content type="html">
&lt;p&gt;Hey! After many months of hard work by Jekyll’s contributors, we’re excited
to announce the first major release of the project in a long while. v1.0.0 is
finally here! While the list of improvements and bug fixes is [quite lengthy][history],
here are the highlights (thanks to &lt;a href=&quot;http://twitter.com/BenBalter&quot;&gt;@benbalter&lt;/a&gt; for the
examples and for compiling this list):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for the Gist tag for easily embedding Gists (&lt;a href=&quot;https://gist.github.com/benbalter/5555251&quot;&gt;example&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Automatically generated post excerpts (&lt;a href=&quot;https://gist.github.com/benbalter/5555369&quot;&gt;example&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Save and preview drafts before publishing (&lt;a href=&quot;https://gist.github.com/benbalter/5555992&quot;&gt;example&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://tigefa4u.github.io/2011/12/jekyll-introduction.html"/>
   <updated>2011-12-29T00:00:00+07:00</updated>
   <id>http://tigefa4u.github.io/2011/12/jekyll-introduction</id>
   <content type="html">
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, 
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately 
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;
  This is where the generated site will be placed once Jekyll is done transforming it. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. 
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;
Templates should be coded in HTML and contain YAML Front Matter. 
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they 
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files 
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data. &lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. 
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template. &lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. 
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to 
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files. &lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;  &lt;br /&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through 
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website. 
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one 
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”. &lt;br /&gt;
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to 
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format 
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []() 
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>